{
  "name": "cordova-plugin-bluetoothle",
  "version": "3.0.1",
  "description": "Use the Bluetooth Low Energy plugin to connect your Cordova app to new Bluetooth devices like heart rate monitors, thermometers, etc...",
  "cordova": {
    "id": "cordova-plugin-bluetoothle",
    "platforms": [
      "android",
      "ios",
      "windows"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/randdusing/cordova-plugin-bluetoothle.git"
  },
  "keywords": [
    "bluetooth",
    "bluetoothle",
    "bluetooth le",
    "cordova",
    "ecosystem:cordova",
    "cordova-android",
    "cordova-ios",
    "cordova-windows"
  ],
  "engines": [
    {
      "name": "cordova",
      "version": ">=3.0.0"
    }
  ],
  "author": {
    "name": "Rand Dusing"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/randdusing/cordova-plugin-bluetoothle/issues"
  },
  "homepage": "https://github.com/randdusing/cordova-plugin-bluetoothle#readme",
  "readme": "# Cordova Bluetooth LE Plugin\nThis plugin allows you to interact with Bluetooth LE devices on Android, iOS, and partially on Windows.\n\n\n## Available for Hire ##\nI'm available for part time contracting work. This would really help keep the project alive and up to date. You can contact me via: <randdusing@gmail.com>, [Facebook](https://www.facebook.com/randdusing), [LinkedIn](https://www.linkedin.com/in/randdusing) or [Twitter](https://twitter.com/randdusing) for more information.\n\n\n## Requirements ##\n\n* Cordova 3.0.0 or higher\n* Android 4.3 or higher, Android Cordova library 5.0.0 or higher, target Android API 23 or higher\n* iOS 7 or higher\n* Windows Phone 8.1 (Tested on Nokia Lumia 630)\n* Device hardware must be certified for Bluetooth LE. i.e. Nexus 7 (2012) doesn't support Bluetooth LE even after upgrading to 4.3 (or higher) without a modification\n* List of devices: http://www.bluetooth.com/Pages/Bluetooth-Smart-Devices-List.aspx\n\n\n## Limitations / Issues ##\n\n* Windows support is limited\n* Disconnecting and quickly reconnecting causes issues on Android. The device becomes connected again, but then quickly disconnects. Adding a timeout before reconnecting fixed the issue for me. I'm not sure if this is a problem with the plugin, Android's Bluetooth LE implementation or Android itself.\n* For subscribing, indication hasn't been tested.\n\n\n## Upgrade 2.x to 3.x ##\n\n* Instead of specifying serviceUuids, serviceUuid, characteristicUuid, etc in the params, use services, service, characteristic, etc. Check out the scan-related, discovery-related and read/write/subscribe operation functions for more info. Discovery related functions will also return uuid properties instead of serviceUuid, characteristicUuid or descriptorUuid.\n* The connecting and disconnecting events were removed.\n\n\n## To Do ##\n\n* Support for Peripheral/Server role\n* Full support for Windows\n* Resolve all callbacks on disconnected event. Currently it's only partially supported.\n\n\n## Using AngularJS ##\n\nCheck out ng-cordova-bluetoothle [here!](https://github.com/randdusing/ng-cordova-bluetoothle)  \nIf timeouts or queueing is needed, please check out the Angular wrapper and its example. I don't plan to implement queuing within the plugin itself anymore.\n\n\n## Installation ##\n\nCordova  \n```cordova plugin add cordova-plugin-bluetoothle```\n\nPhoneGap Build  \n```<gap:plugin name=\"cordova-plugin-bluetoothle\" source=\"npm\" />```\n\n\n## Installation Quirks (iOS) ##\nBy default, background mode is enabled. If you wish to remove this, follow the steps below:  \n1. Click your Project  \n2. Click your Target  \n3. Click Capabilities  \n4. Scroll down to Background Modes section, and uncheck Uses Bluetooth LE accessories  \n5. Open up BluetoothLePlugin.m  \n6. Remove \"CBCentralManagerOptionRestoreIdentifierKey:pluginName,\" from the initWithDelegate call in the initialize function  \n7. Remove the willRestoreState function  \n8. Optionally remove 'NSString *const pluginName = @\"bluetoothleplugin\";' since it's no longer used  \n\n\nUpdating the plugin for iOS sometimes causes BluetoothLePlugin.m to be removed from the Compile Sources and CoreBluetooth.framework to be removed from Link Binary with Libraries. To fix:\n1. Click your project to open the \"properties\" window  \n2. Click your target  \n3. Click Build Phases  \n4. Ensure BluetoothLePlugin.m is added to the Compile Sources  \n5. Ensure CoreBluetooth.framework is added to the Link Binary with Libraries  \n\n\n## Installation Quirks (Android) ##\nThe latest version of the plugin requires you to set the Android target API to a minimum of 23 to support permission requirements for scanning. If you can't target 23, please use plugin version 2.4.0 or below.\n\n\n## Discovery Quirks (iOS vs Android) ##\nDiscovery works differently between Android and iOS. In Android, a single function is called to initiate discovery of all services, characteristics and descriptors on the device. In iOS, a single function is called to discover the device's services. Then another function to discover the characteristics of a particular service. And then another function to discover the descriptors of a particular characteristic. The [Device plugin](http://docs.phonegap.com/en/edge/cordova_device_device.md.html#Device) should be used to properly determine the device and make the proper calls if necessary. Additionally, if a device is disconnected, it must be rediscovered when running on iOS. **iOS now supports Android style discovery, but use with caution. It's a bit buggy on iOS8, but seems to work fine on iOS9.**\n\n\n## UUIDs ##\nUUIDs can be 16 bits or 128 bits. The \"out of the box\" UUIDs from the link below are 16 bits.\nSince iOS returns the 16 bit version of the \"out of the box\" UUIDs even if a 128 bit UUID was used in the parameters, the 16 bit version should always be used for the \"out of the box\" UUIDs for consistency.\nAndroid on the other hand only uses the 128 bit version, but the plugin will automatically convert 16 bit UUIDs to the 128 bit version on input and output. For a list of out of the box UUIDS, see [Bluetooth Developer Portal](https://developer.bluetooth.org/gatt/services/Pages/ServicesHome.aspx)\n\n\n## Advertisement Data / MAC Address ##\nOn iOS, the MAC address is hidden from the advertisement packet, and the address returned from the scanResult is a generated, device-specific address. This is a problem when using devices like iBeacons where you need the MAC Address. Fortunately the CLBeacon class can be used for this, but unfortunately it's not supported in this plugin.\nOne option is to set Manufacturer Specific Data in the advertisement packet if that's possible in your project.\nAnother option is to connect to the device and use the \"Device Information\" (0x180A) service, but connecting to each device is much more energy intensive than scanning for advertisement data.\nSee the following StackOverflow posts for more info: [here](https://stackoverflow.com/questions/18973098/get-mac-address-of-bluetooth-low-energy-peripheral) and [here](https://stackoverflow.com/questions/22833198/get-advertisement-data-for-ble-in-ios)\n\n\n## Emulator ##\nNeither Android nor iOS support Bluetooth on emulators, so you'll need to test on a real device.\n\n\n## Methods ##\n\n* [bluetoothle.initialize] (#initialize)\n* [bluetoothle.enable] (#enable) (Android)\n* [bluetoothle.disable] (#disable) (Android)\n* [bluetoothle.startScan] (#startscan)\n* [bluetoothle.stopScan] (#stopscan)\n* [bluetoothle.retrieveConnected] (#retrieveconnected) (iOS)\n* [bluetoothle.connect] (#connect)\n* [bluetoothle.reconnect] (#reconnect)\n* [bluetoothle.disconnect] (#disconnect)\n* [bluetoothle.close] (#close)\n* [bluetoothle.discover] (#discover)\n* [bluetoothle.services] (#services) (iOS)\n* [bluetoothle.characteristics] (#characteristics) (iOS)\n* [bluetoothle.descriptors] (#descriptors)  (iOS)\n* [bluetoothle.read] (#read)\n* [bluetoothle.subscribe] (#subscribe)\n* [bluetoothle.unsubscribe] (#unsubscribe)\n* [bluetoothle.write] (#write)\n* [bluetoothle.readDescriptor] (#readdescriptor)\n* [bluetoothle.writeDescriptor] (#writedescriptor)\n* [bluetoothle.rssi] (#rssi)\n* [bluetoothle.isInitialized] (#isinitialized)\n* [bluetoothle.isEnabled] (#isenabled)\n* [bluetoothle.isScanning] (#isscanning)\n* [bluetoothle.isConnected] (#isconnected)\n* [bluetoothle.isDiscovered] (#isdiscovered)\n* [bluetoothle.hasPermission] (#haspermission) (Android)\n* [bluetoothle.requestPermission] (#requestpermission) (Android)\n* [bluetoothle.encodedStringToBytes] (#encodedstringtobytes)\n* [bluetoothle.bytesToEncodedString] (#bytestoencodedstring)\n* [bluetoothle.stringToBytes] (#stringtobytes)\n* [bluetoothle.bytesToString] (#bytestostring)\n\n\n## Errors ##\n\nWhenever the error callback is executed, the return object will contain the error type and a message.  \n* initialize - Bluetooth isn't initialized (Try initializing Bluetooth)\n* enable - Bluetooth isn't enabled (Request user to enable Bluetooth)\n* disable - Bluetooth isn't disabled (Can't enabled if already disabled)\n* startScan - Scan couldn't be started (Is the scan already running?)\n* stopScan - Scan couldn't be stopped (Is the scan already stopped?)\n* connect - Connection attempt failed (Is the device address correct?)\n* reconnect - Reconnection attempt failed (Was the device ever connected?)\n* discover - Failed to discover device (Is the device already discovered or discovering?)\n* services - Failed to discover services (Is the device iOS?)\n* characteristics - Failed to discover characteristics (Is the device iOS?)\n* descriptors - Failed to discover descriptors (Is the device iOS?)\n* service - Service doesn't exist (Was it discovered? Correct uuid? Is the device iOS?)\n* characteristic - Characteristic doesn't exist (Was it discovered? Correct uuid? Is the device iOS?)\n* descriptor - Descriptor doesn't exist (Was it discovered? Correct uuid? Is the device iOS?)\n* read - Failed to read (Not sure what would cause this)\n* subscription - Failed to subscribe or unsubscribe (Does the characteristic have the Client Configuration descriptor?)\n* write - Failed to write (Was a write value provided?)\n* readDescriptor - Failed to read descriptor (Not sure what would cause this)\n* writeDescriptor - Failed to write descriptor (Was a write value provided?)\n* rssi - Failed to read RSSI (Not sure what would cause this)\n* mtu - Failed to set MTU (Is device Android?)\n* requestConnectionPriority - Failed to request connection priority (Is the device iOS?)\n* arguments - Invalid arguments (Check arguments)\n* neverConnected - Device never connected (Call connect, not reconnect)\n* isNotDisconnected - Device is not disconnected (Don't call connect or reconnect while connected)\n* isNotConnected - Device isn't connected (Don't call discover or any read/write operations)\n* isDisconnected - Device is disconnected (Don't call disconnect)\n\nFor example:\n```javascript\n{\"error\":\"startScan\", \"message\":\"Scanning already started\"}\n```\n\n\n\n## Permissions (Android) ##\nCharacteristics can have the following different permissions: read, readEncrypted, readEncryptedMITM, write, writeEncrypted, writeEncryptedMITM, writeSigned, writeSignedMITM. Unfortuately, the getProperties() call always seems to return 0, which means no properties are set. Not sure if this is an issue with my mobile device or that all the Bluetooth devices just don't have the properties set. If the characteristic has a permission, it will exist as a key in the characteristic's permissions object. See discovery().\n\n[Android Docs](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html)\n\n\n## Properties ##\nCharacteristics can have the following different properties: broadcast, read, writeWithoutResponse, write, notify, indicate, authenticatedSignedWrites, extendedProperties, notifyEncryptionRequired, indicateEncryptionRequired. If the characteristic has a property, it will exist as a key in the characteristic's properties object. See discovery() or characteristics()\n\n[iOS Docs](https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html) and \n[Android Docs](https://developer.apple.com/library/mac/documentation/CoreBluetooth/Reference/CBCharacteristic_Class/translated_content/CBCharacteristic.html#//apple_ref/c/tdef/CBCharacteristicProperties)\n\n\n\n## Life Cycle ##\n\n1. initialize\n2. scan (if device address is unknown)\n3. connect\n4. discover OR services/characteristics/descriptors (iOS)\n5. read/subscribe/write characteristics AND read/write descriptors\n6. disconnect\n7. close\n\n\n## Functions ##\n\n### initialize ###\nInitialize Bluetooth on the device. Must be called before anything else. Callback will continuously be used whenever Bluetooth is enabled or disabled. Note: Although Bluetooth initialization could initially be successful, there's no guarantee whether it will stay enabled. Each call checks whether Bluetooth is disabled. If it becomes disabled, the user must connect to the device, start a read/write operation, etc again. If Bluetooth is disabled, you can request the user to enable it by setting the request property to true. The `request` property in the `params` argument is optional and defaults to false. Also, this function should only be called once.\n\n```javascript\nbluetoothle.initialize(initializeSuccess, initializeError, params);\n```\n\n##### Params #####\n* request = true / false (default) - Should user be prompted to enable Bluetooth\n* statusReceiver = true (default) / false - Should change in Bluetooth status notifications be sent.\n\n```javascript\n{\n  \"request\": true,\n  \"statusReceiver\": false\n}\n```\n\n##### Success #####\n* status => enabled = Bluetooth is enabled\n* status => disabled = Bluetooth is disabled\n\n```javascript\n{\n  \"status\": \"enabled\"\n}\n```\n\n\n\n### enable ###\nEnable Bluetooth on the device. Android support only.\n\n```javascript\nbluetoothle.enable(enableSuccess, enableError);\n```\n\n##### Error #####\n* errorDisable = Bluetooth isn't disabled, so unable to enable.\n* errorEnable = Immediate failure of the internal enable() function due to Bluetooth already on or airplane mode, so unable to enable.\n\n##### Success #####\nThe successCallback isn't actually used. Listen to initialize callbacks for change in Bluetooth state. A successful enable will return a status => enabled via initialize success callback.\n\n\n\n### disable ###\nDisable Bluetooth on the device. Android support only.\n\n```javascript\nbluetoothle.disable(disableSuccess, disableError);\n```\n\n##### Error #####\n* errorEnable = Bluetooth isn't enabled, so unable to disable.\n* errorDisable = Immediate failure of the internal disable() function due to Bluetooth already off, so unable to enable. This shouldn't occur since the plugin is already checking this condition anyways.\n\n##### Success #####\nThe successCallback isn't actually used. Listen to initialize callbacks for change in Bluetooth state. A successful disable will return an error => enable via initialize error callback.\n\n\n\n### startScan ###\nScan for Bluetooth LE devices. Since scanning is expensive, stop as soon as possible. The Cordova app should use a timer to limit the scan interval. Also, Android uses an AND operator for filtering, while iOS uses an OR operator. Android API >= 23 requires ACCESS_COARSE_LOCATION permissions to find unpaired devices. Permissions can be requested by using the hasPermission and requestPermission functions.\n\n```javascript\nbluetoothle.startScan(startScanSuccess, startScanError, params);\n```\n\n##### Params #####\n* services = An array of service IDs to filter the scan or empty array / null\n* iOS - See [iOS Docs](https://developer.apple.com/library/ios/documentation/CoreBluetooth/Reference/CBCentralManager_Class/#//apple_ref/doc/constant_group/Peripheral_Scanning_Options)\n  * allowDuplicates = True/false to allow duplicate advertisement packets, defaults to false.\n* Android - See [Android Docs](http://developer.android.com/reference/android/bluetooth/le/ScanSettings.html)\n  * scanMode - Defaults to Low Power. Available from API21 / API 23.\n  * matchMode - Defaults to Aggressive. Available from API23.\n  * matchNum - Defaults to One Advertisement. Available from API23.\n  * callbackType - Defaults to All Matches. Available from API21 / API 23. *Note: Careful using this one. When using CALLBACK_TYPE_FIRST_MATCH on a Nexus 7 on API 21, I received a Feature Unsupported error when starting the scan.\n\n```javascript\n{\n  \"services\": [\n    \"180D\",\n    \"180F\"\n  ],\n  \"allowDuplicates\": true\n  \"scanMode\": bluetoothle.SCAN_MODE_LOW_LATENCY,\n  \"matchMode\": bluetoothle.MATCH_MODE_AGGRESSIVE,\n  \"matchNum\": bluetoothle.MATCH_NUM_MAX_ADVERTISEMENT,\n  \"callbackType\": bluetoothle.CALLBACK_TYPE_ALL_MATCHES,\n}\n```\n\n##### Success #####\n* status => scanStarted = Scan has started\n* status => scanResult = Scan has found a device\n  * name = the device's display name\n  * address = the device's address / identifier for connecting to the object\n  * rssi = signal strength\n  * advertisement = advertisement data in encoded string of bytes, use bluetoothle.encodedStringToBytes() (Android)\n  * advertisement = advertisement hash with the keys specified [here](https://developer.apple.com/library/ios/documentation/CoreBluetooth/Reference/CBCentralManagerDelegate_Protocol/#//apple_ref/doc/constant_group/Advertisement_Data_Retrieval_Keys) (iOS)\n\n```javascript\n{\n  \"status\": \"scanStarted\"\n}\n\n{\n  \"status\": \"scanResult\",\n  \"advertisement\": \"awArG05L\", //Android\n  \"advertisement\": { //iOS\n    \"serviceUuids\": [\n      \"180D\"\n    ],\n    \"manufacturerData\": \"awAvFFZY\",\n    \"txPowerLevel\": 0,\n    \"overflowServiceUuids\": [\n    ],\n    \"isConnectable\": true,\n    \"solicitedServiceUuids\": [\n    ],\n    \"serviceData\": {\n    },\n    \"localName\": \"Polar H7 3B321015\"\n  },\n  \"rssi\": -58,\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n\n\n### stopScan ###\nStop scan for Bluetooth LE devices. Since scanning is expensive, stop as soon as possible. The app should use a timer to limit the scanning time.\n\n```javascript\nbluetoothle.stopScan(stopScanSuccess, stopScanError);\n```\n\n##### Success #####\n* status => scanStop = Scan has stopped\n\n```javascript\n{\n  \"status\": \"scanStopped\"\n}\n```\n\n\n\n### retrieveConnected ###\nRetrieved paired Bluetooth LE devices. Yes, this function should be renamed, but I went with iOS's naming. In iOS, devices that are \"paired\" to will not return during a normal scan. Callback is \"instant\" compared to a scan. I haven't been able to get UUID filtering working on Android, so it returns all paired BLE devices.\n\n```javascript\nbluetoothle.retrieveConnected(retrieveConnectedSuccess, retrieveConnectedError, params);\n```\n\n##### Params #####\n* services = An array of service IDs to filter the retrieval by. If no service IDs are specified, no devices will be returned. Ignored on Android\n\n```javascript\n{\n  \"services\": [\n    \"180D\",\n    \"180F\"\n  ]\n}\n```\n\n##### Success #####\nAn array of device objects:\n* name = the device's display name\n* address = the device's address / identifier for connecting to the object\n\n```javascript\n[\n  {\n    \"name\": \"Polar H7 3B321015\",\n    \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n  }\n]\n```\n\n\n\n### connect ###\nConnect to a Bluetooth LE device. The app should use a timer to limit the connecting time in case connecting is never successful. Once a device is connected, it may disconnect without user intervention. The original connection callback will be called again and receive an object with status => disconnected. To reconnect to the device, use the reconnect method. If a timeout occurs, the connection attempt should be canceled using disconnect(). For simplicity, I recommend just using connect() and close(), don't use reconnect() or disconnect().\n\n```javascript\nbluetoothle.connect(connectSuccess, connectError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n##### Success #####\n* status => connected = Device connected\n* status => disconnected = Device unexpectedly disconnected\n\n```javascript\n{\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"status\": \"connected\"\n}\n\n{\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"status\": \"disconnected\"\n}\n```\n\n\n\n### reconnect ###\nReconnect to a previously connected Bluetooth device. The app should use a timer to limit the connecting time. If a timeout occurs, the reconnection attempt should be canceled using disconnect() or close().\n\n```javascript\nbluetoothle.reconnect(reconnectSuccess, reconnectError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n##### Success #####\n* status => connected = Device connected\n* status => disconnected = Device unexpectedly disconnected\n\n```javascript\n{\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"status\": \"connected\"\n}\n\n{\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"status\": \"disconnected\"\n}\n```\n\n\n### disconnect ###\nDisconnect from a Bluetooth LE device. It's simpler to just call close().\n\n```javascript\nbluetoothle.disconnect(disconnectSuccess, disconnectError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n##### Success #####\n* status => disconnected = Device disconnected\n\n```javascript\n{\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"status\": \"disconnected\"\n}\n```\n\n\n### close ###\nClose/dispose a Bluetooth LE device. Prior to 2.7.0, you needed to disconnect to the device before closing, but this is no longer the case.\n\n```javascript\nbluetoothle.close(closeSuccess, closeError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n##### Success #####\n* status => closed = Connection with device completely closed down\n\n```javascript\n{\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"status\": \"closed\"\n}\n```\n\n\n\n### discover ###\nDiscover all the devices services, characteristics and descriptors. Doesn't need to be called again after disconnecting and then reconnecting. If using iOS, you shouldn't use discover and services/characteristics/descriptors on the same device. There seems to be an issue with calling discover on iOS8 devices, so use with caution.\n\n```javascript\nbluetoothle.discover(discoverSuccess, discoverError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n\n```javascript\n{\n  \"address\": \"00:22:D0:3B:32:10\"\n}\n```\n\n##### Return #####\nDevice Object:\n* status => discovered = Device was discovered\n* address = Device address\n* name = Device name\n* services = Array of service objects below\n\nService Object:\n* uuid = Service's uuid\n* characteristics = Array of characteristic objects below\n\nCharacteristic Object:\n* uuid = Characteristic's uuid\n* properties = If the property is defined as a key, the characteristic has that property\n* permissions = If the permission is defined as a key, the character has that permission\n* descriptors = Array of descriptor objects below\n\nDescriptor Object:\n* uuid = Descriptor's uuid\n\n```javascript\n{\n  \"address\": \"00:22:D0:3B:32:10\",\n  \"status\": \"discovered\",\n  \"services\": [\n    {\n      \"characteristics\": [\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a00\", // [Device Name](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.gap.device_name.xml)\n          \"properties\": {\n            \"write\": true,\n            \"writeWithoutResponse\": true,\n            \"read\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a01\", // [Appearance](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.gap.appearance.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a02\", // [Peripheral Privacy Flag](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.gap.peripheral_privacy_flag.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a03\", // [Reconnection Address](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.gap.reconnection_address.xml)\n          \"properties\": {\n            \"write\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a04\", // [Pheripheral Preferred Connection Parameters](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.gap.peripheral_preferred_connection_parameters.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        }\n      ],\n      \"uuid\": \"1800\" // [Generic Access](https://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u=org.bluetooth.service.generic_access.xml)\n    },\n    {\n      \"characteristics\": [\n        {\n          \"descriptors\": [\n            {\n              \"uuid\": \"2902\"\n            }\n          ],\n          \"uuid\": \"2a05\", // [Service Changed](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.gatt.service_changed.xml)\n          \"properties\": {\n            \"indicate\": true\n          }\n        }\n      ],\n      \"uuid\": \"1801\" // [Generic Attribute](https://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u=org.bluetooth.service.generic_attribute.xml)\n    },\n    {\n      \"characteristics\": [\n        {\n          \"descriptors\": [\n            {\n              \"uuid\": \"2902\"\n            }\n          ],\n          \"uuid\": \"2a37\", // [Heart Rate Measurement](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.heart_rate_measurement.xml)\n          \"properties\": {\n            \"notify\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a38\", // [Body Sensor Location](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.body_sensor_location.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        }\n      ],\n      \"uuid\": \"180d\" // [Heart Rate](https://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u=org.bluetooth.service.heart_rate.xml)\n    },\n    {\n      \"characteristics\": [\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a23\", // [System ID](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.system_id.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a24\", // [Model Number String](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.model_number_string.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a25\", // [Serial Number String](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.serial_number_string.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a26\", // [Firmware Revision String](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.firmware_revision_string.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a27\", // [hardware Revision String](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.hardware_revision_string.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a28\", // [Software Revision String](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.software_revision_string.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        },\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a29\", // [Manufacturer Name String](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.manufacturer_name_string.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        }\n      ],\n      \"uuid\": \"180a\" // [Device Information](https://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u=org.bluetooth.service.device_information.xml)\n    },\n    {\n      \"characteristics\": [\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"2a19\", // [Battery Level](https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.battery_level.xml)\n          \"properties\": {\n            \"read\": true\n          }\n        }\n      ],\n      \"uuid\": \"180f\" // [Battery Service](https://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u=org.bluetooth.service.battery_service.xml)\n    },\n    {\n      \"characteristics\": [\n        {\n          \"descriptors\": [\n\n          ],\n          \"uuid\": \"6217ff4c-c8ec-b1fb-1380-3ad986708e2d\",\n          \"properties\": {\n            \"read\": true\n          }\n        },\n        {\n          \"descriptors\": [\n            {\n              \"uuid\": \"2902\"\n            }\n          ],\n          \"uuid\": \"6217ff4d-91bb-91d0-7e2a-7cd3bda8a1f3\",\n          \"properties\": {\n            \"write\": true,\n            \"indicate\": true\n          }\n        }\n      ],\n      \"uuid\": \"6217ff4b-fb31-1140-ad5a-a45545d7ecf3\"\n    }\n  ],\n  \"name\": \"Polar H7 3B321015\"\n}\n```\n\n\n\n### services ###\nDiscover the device's services. Not providing an array of services will return all services and take longer to discover. iOS support only.\n\n```javascript\nbluetoothle.services(servicesSuccess, servicesError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n* services = An array of service IDs to filter the scan or empty array / null\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"services\": [\n\n  ]\n}\n```\n\n##### Success #####\n* status => services = Services discovered\n  * services = Array of service UUIDS\n\n```javascript\n{\n  \"status\": \"services\",\n  \"services\": [\n    \"180d\",\n    \"180a\",\n    \"180f\",\n    \"6217ff4b-fb31-1140-ad5a-a45545d7ecf3\"\n  ],\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n\n\n### characteristics ###\nDiscover the service's characteristics. Not providing an array of characteristics will return all characteristics and take longer to discover. iOS support only.\n\n```javascript\nbluetoothle.characteristics(characteristicsSuccess, characteristicsError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n* service = Service UUID\n* characteristics = An array of characteristic IDs to discover or empty array / null\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"service\": \"180d\",\n  \"characteristics\": [\n\n  ]\n}\n```\n\n##### Success #####\n* status => characteristics = Characteristics discovered\n  * uuid = Service UUID\n  * characteristics = Array of characteristics\n    * properties = Object of defined properties\n    * uuid = Characteristic UUID\n\n```javascript\n{\n  \"status\": \"characteristics\",\n  \"characteristics\": [\n    {\n      \"properties\": {\n        \"notify\": true\n      },\n      \"uuid\": \"2a37\"\n    },\n    {\n      \"properties\": {\n        \"read\": true\n      },\n      \"uuid\": \"2a38\"\n    }\n  ],\n  \"name\": \"Polar H7 3B321015\",\n  \"service\": \"180d\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n\n\n### descriptors ###\nDiscover the characteristic's descriptors. iOS support only.\n\n```javascript\nbluetoothle.descriptors(descriptorsSuccess, descriptorsError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n* service = The service's ID\n* characteristic = The characteristic's ID\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"service\": \"180d\",\n  \"characteristic\": \"2a37\"\n}\n```\n\n##### Success #####\n* status => descriptors = Descriptors discovered\n  * service = Service UUID\n  * characteristic = characteristic UUID\n  * descriptors = Array of Descriptor UUIDs\n\n```javascript\n{\n  \"status\": \"descriptors\",\n  \"descriptors\": [\n    \"2902\"\n  ],\n  \"characteristic\": \"2a37\",\n  \"name\": \"Polar H7 3B321015\",\n  \"service\": \"180d\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n\n\n### read ###\nRead a particular service's characteristic once.\n\n```javascript\nbluetoothle.read(readSuccess, readError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n* service = The service's UUID\n* characteristic = The characteristic's UUID\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"service\": \"180d\",\n  \"characteristic\": \"2a38\"\n}\n```\n\n##### Success #####\n* status => read = Characteristics read\n  * service = Service UUID\n  * characteristic = Characteristic UUID\n  * value = Base64 encoded string of bytes. Use bluetoothle.encodedStringToBytes(obj.value) to convert to a unit8Array. See characteristic's specification and example below on how to correctly parse this.\n\n```javascript\n{\n  \"status\": \"read\",\n  \"value\": \"AQ==\",\n  \"characteristic\": \"2a38\",\n  \"name\": \"Polar H7 3B321015\",\n  \"service\": \"180d\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n\n### subscribe ###\nSubscribe to a particular service's characteristic. Once a subscription is no longer needed, execute unsubscribe in a similar fashion. The Client Configuration descriptor will automatically be written to enable notification/indication.\n\n```javascript\nbluetoothle.subscribe(subscribeSuccess, subscribeError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n* service = The service's UUID\n* characteristic = The characteristic's UUID\n* isNotification is only required on Android. True (or null) means notification will be enabled. False means indication will be enabled.\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"service\": \"180d\",\n  \"characteristic\": \"2a37\",\n  \"isNotification\" : true\n}\n```\n\n##### Success #####\n* status => subscribed = Subscription has started\n* status => subscribedResult = Subscription result has been received\n  * service = Service UUID\n  * characteristic = Characteristic UUID\n  * value = Base64 encoded string of bytes. Use bluetoothle.encodedStringToBytes(obj.value) to convert to a unit8Array. See characteristic's specification and example below on how to correctly parse this.\n\n```javascript\n{\n  \"status\": \"subscribed\",\n  \"characteristic\": \"2a37\",\n  \"name\": \"Polar H7 3B321015\",\n  \"service\": \"180d\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n\n{\n  \"status\": \"subscribedResult\",\n  \"value\": \"BkY=\",\n  \"characteristic\": \"2a37\",\n  \"name\": \"Polar H7 3B321015\",\n  \"service\": \"180d\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n\n\n### unsubscribe ###\nUnsubscribe to a particular service's characteristic.\n\n```javascript\nbluetoothle.unsubscribe(unsubscribeSuccess, unsubscribeError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n* service = The service's UUID\n* characteristic = The characteristic's UUID\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"service\": \"180d\",\n  \"characteristic\": \"2a37\"\n}\n```\n\n##### Success #####\n* status => unsubscribed = Characteristics unsubscribed\n  * service = Service UUID\n  * characteristic = Characteristic UUID\n\n```javascript\n{\n  \"status\": \"unsubscribed\",\n  \"characteristic\": \"2a37\",\n  \"name\": \"Polar H7 3B321015\",\n  \"service\": \"180d\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n\n\n### write ###\nWrite a particular service's characteristic.\n\n```javascript\nbluetoothle.write(writeSuccess, writeError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n* service = The service's UUID\n* characteristic = The characteristic's UUID\n* value = Base64 encoded string\n\nValue is a base64 encoded string of bytes to write. Use bluetoothle.bytesToEncodedString(bytes) to convert to base64 encoded string from a unit8Array.\nTo write without response, set type to \"noResponse\". Any other value will default to write with response. Note, no callback will occur on write without response.\n```javascript\nvar string = \"Hello World\";\nvar bytes = bluetoothle.stringToBytes(string);\nvar encodedString = bluetoothle.bytesToEncodedString(encodedString);\n\n//Note, this example doesn't actually work since it's read only characteristic\n{\"value\":encodedString,\"service\":\"180F\",\"characteristic\":\"2A19\",\"type\":\"noResponse\",\"address\":\"ABC123\"}\n```\n\n##### Success #####\nValue is a base64 encoded string of written bytes. Use bluetoothle.encodedStringToBytes(obj.value) to convert to a unit8Array. See characteristic's specification and example below on how to correctly parse this.\n\n```javascript\nvar returnObj = {\"status\":\"written\",\"service\":\"180F\",\"characteristic\":\"2A19\",\"value\":\"SGVsbG8gV29ybGQ=\",\"address\":\"ABC123\"}\nvar bytes = bluetoothle.encodedStringToBytes(returnObj.value);\nvar string = bluetoothle.bytesToString(bytes); //This should equal Hello World!\n```\n\n\n\n### readDescriptor ###\nRead a particular characterist's descriptor\n\n```javascript\nbluetoothle.read(readDescriptorSuccess, readDescriptorError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n* service = The service's ID\n* characteristic = The characteristic's ID\n* descriptor = The descriptor's ID\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"service\": \"180d\",\n  \"characteristic\": \"2a37\",\n  \"descriptor\": \"2902\"\n}\n```\n\n##### Success #####\n* status => readDescriptor = Descriptor was read\n  * service = Service UUID\n  * characteristic = Characteristic UUID\n  * descriptor = Descriptor UUID\n  * value = Base64 encoded string of bytes. Use bluetoothle.encodedStringToBytes(obj.value) to convert to a unit8Array.\n\n```javascript\n{\n  \"status\": \"readDescriptor\",\n  \"service\": \"180d\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"characteristic\": \"2a37\",\n  \"value\": \"AQAAAAAAAAA=\",\n  \"name\": \"Polar H7 3B321015\",\n  \"descriptor\": \"2902\"\n}\n```\n\n\n\n### writeDescriptor ###\nWrite a particular characteristic's descriptor. Unable to write characteristic configuration directly to keep in line with iOS implementation. Instead use subscribe/unsubscribe, which will automatically enable/disable notification. ***Note, limited testing and likely needs to be made more generic***\n\n```javascript\nbluetoothle.writeDescriptor(writeDescriptorSuccess, writeDescriptorError, params);\n```\n\n##### Params #####\n* address = The address/identifier provided by the scan's return object\n* service = The service's ID\n* characteristic = The characteristic's ID\n* descriptor = The descriptor's ID\n* value - Base64 encoded string\n\nValue is a base64 encoded string of bytes to write. Use bluetoothle.bytesToEncodedString(bytes) to convert to base64 encoded string from a unit8Array.\n\n```javascript\nvar string = \"Hello World\";\nvar bytes = bluetoothle.stringToBytes(string);\nvar encodedString = bluetoothle.bytesToEncodedString(encodedString);\n\n{\"service\":\"180D\",\"characteristic\":\"2A37\",\"descriptor\":\"2902\",\"value\":encodedString,\"address\":\"ABC123\"}\n```\n\n##### Success #####\nValue is a base64 encoded string of written bytes. Use bluetoothle.encodedStringToBytes(obj.value) to convert to a unit8Array.\n\n```javascript\n{\"status\":\"writeDescriptor\",\"service\":\"180D\",\"characteristic\":\"2A37\", \"descriptor\":\"2902\",\"value\":\"SGVsbG8gV29ybGQ\",\"address\":\"ABC123\"}\nvar bytes = bluetoothle.encodedStringToBytes(returnObj.value);\nvar string = bluetoothle.bytesToString(bytes); //This should equal Hello World!\n```\n\n\n\n### rssi ###\nRead RSSI of a connected device. RSSI is also returned with scanning.\n\n```javascript\nbluetoothle.rssi(rssiSuccess, rssiError, params);\n```\n\n#### Params ####\n* address = The address/identifier provided by the scan's return object\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n##### Success #####\n* status => rssi = RSSI retrieved\n  * rssi = signal strength\n\n```javascript\n{\n  \"status\": \"rssi\",\n  \"rssi\": -50,\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n\n### mtu ###\nSet MTU of a connected device. Android only.\n\n```javascript\nbluetoothle.mtu(mtuSuccess, mtuError, params);\n```\n\n#### Params ####\n* address = The address/identifier provided by the scan's return object\n* mtu - Integer value mtu should be set to\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"mtu\" : 50\n}\n```\n\n##### Success #####\n* status => mtu = MTU set\n  * mtu = mtu value\n\n```javascript\n{\n  \"status\": \"mtu\",\n  \"mtu\": 50,\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n\n\n### isInitialized ###\nDetermine whether the adapter is initialized. No error callback. Returns true or false\n\n```javascript\nbluetoothle.isInitialized(isInitialized);\n```\n\n##### Success Return #####\n* status => isInitialized = true/false\n\n```javascript\n{\n  \"isInitialized\": true\n}\n```\n\n\n### isEnabled ###\nDetermine whether the adapter is enabled. No error callback\n\n```javascript\nbluetoothle.isEnabled(isEnabled);\n```\n\n##### Success #####\n* status => isEnabled = true/false\n\n```javascript\n{\n  \"isEnabled\": true\n}\n```\n\n\n\n### isScanning ###\nDetermine whether the adapter is initialized. No error callback. Returns true or false\n\n```javascript\nbluetoothle.isScanning(isScanning);\n```\n\n##### Return #####\n* status => isScanning = true/false\n\n```javascript\n{\n  \"isScanning\": false\n}\n```\n\n\n\n### isConnected ###\nDetermine whether the device is connected, or error if not initialized or never connected to device.\n\n```javascript\nbluetoothle.isConnected(isConnectedSuccess, isConnectedError, params);\n```\n\n#### Params ####\n* address = The address/identifier provided by the scan's return object\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n##### Success #####\n* status => isConnected = true/false\n\n```javascript\n{\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"isConnected\": false\n}\n```\n\n\n\n### isDiscovered ###\nDetermine whether the device's characteristics and descriptors have been discovered, or error if not initialized or never connected to device.\n\n```javascript\nbluetoothle.isDiscovered(isDiscoveredSuccess, isDiscoveredError, params);\n```\n\n#### Params ####\n* address = The address/identifier provided by the scan's return object\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\"\n}\n```\n\n##### Success #####\n* status => isDiscovered = true/false\n\n```javascript\n{\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"isDiscovered\": false\n}\n```\n\n\n\n### hasPermission ###\nDetermine whether coarse location privileges are granted since scanning for unpaired devices requies it in Android API 23\n\n```javascript\nbluetoothle.hasPermission(hasPermissionSuccess);\n```\n\n##### Success #####\n* status => hasPermission = true/false\n\n```javascript\n{\n  \"hasPermission\": true\n}\n```\n\n\n\n### requestPermission ###\nRequest coarse location privileges since scanning for unpaired devices requies it in Android API 23.\n\n```javascript\nbluetoothle.requestPermission(requestPermissionSuccess);\n```\n\n##### Success #####\n* status => requestPermission = true/false\n\n```javascript\n{\n  \"requestPermission\": true\n}\n```\n\n\n\n### requestConnectionPriority ###\nRequest a change in the connection priority to improve throughput when transfer large amounts of data via BLE. Android support only. iOS will return error.\n\n```javascript\nbluetoothle.requestConnectionPriority(success, error, params);\n```\n\n#### Params ####\n* address = The address/identifier provided by the scan's return object\n* connectionPriority = low / balanced / high\n\n```javascript\n{\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"connectionPriority\" : \"balanced\"\n}\n```\n\n##### Success #####\n* status => connectionPriorityRequested = true\n\n```javascript\n{\n  \"name\": \"Polar H7 3B321015\",\n  \"address\": \"ECC037FD-72AE-AFC5-9213-CA785B3B5C63\",\n  \"status\" : \"connectionPriorityRequested\"\n}\n```\n\n\n### encodedStringToBytes ###\nHelper function to convert a base64 encoded string from a characteristic or descriptor value into a uint8Array object.\n\n```javascript\nbluetoothle.encodedStringToBytes(string);\n```\n\n\n\n### bytesToEncodedString ###\nHelper function to convert a unit8Array to a base64 encoded string for a characteric or descriptor write.\n\n```javascript\nbluetoothle.bytesToEncodedString(bytes);\n```\n\n\n\n### stringToBytes ###\nHelper function to convert a string to bytes.\n\n```javascript\nbluetoothle.stringToBytes(string);\n```\n\n\n\n### bytesToString ###\nHelper function to convert bytes to a string.\n\n```javascript\nbluetoothle.bytesToString(bytes);\n```\n\n\n\n## Example #\nSee the example provided with the [Angular Wrapper](https://github.com/randdusing/ng-cordova-bluetoothle)\n\n\n## Data Parsing Example ##\n```javascript\nif (obj.status == \"subscribedResult\")\n{\n  //Turn the base64 string into an array of unsigned 8bit integers\n  var bytes = bluetoothle.encodedStringToBytes(obj.value);\n  if (bytes.length === 0)\n  {\n    return;\n  }\n\n  //NOTE: Follow along to understand how the parsing works\n  //https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.heart_rate_measurement.xml\n\n  //First byte provides instructions on what to do with the remaining bytes\n  var flag = bytes[0];\n\n  //Offset from beginning of the array\n  var offset = 1;\n\n  //If the first bit of the flag is set, the HR is in 16 bit form\n  if ((flag & 0x01) == 1)\n  {\n      //Extract second and third bytes and convert to 16bit unsigned integer\n      var u16bytesHr = bytes.buffer.slice(offset, offset + 2);\n      var u16Hr = new Uint16Array(u16bytesHr)[0];\n      //16 bits takes up 2 bytes, so increase offset by two\n      offset += 2;\n  }\n  //Else the HR is in 8 bit form\n  else\n  {\n      //Extract second byte and convert to 8bit unsigned integer\n      var u8bytesHr = bytes.buffer.slice(offset, offset + 1);\n      var u8Hr = new Uint8Array(u8bytesHr)[0];\n\n      //Or I believe I could just do this: var u8Hr = u8bytesHr[offset]\n\n      //8 bits takes up 1 byte, so increase offset by one\n      offset += 1;\n  }\n\n  //NOTE: I'm ignoring the second and third bit because I'm not interested in the sensor contact, and it doesn't affect the offset\n\n  //If the fourth bit is set, increase the offset to skip over the energy expended information\n  if ((flag & 0x08) == 8)\n  {\n      offset += 2;\n  }\n\n  //If the fifth bit is set, get the RR interval(s)\n  if ((flag & 0x10) == 16)\n  {\n      //Number of rr intervals\n      var rrCount = (bytes.length - offset) / 2;\n\n      for (var i = rrCount - 1; i >= 0; i--)\n      {\n          //Cast to 16 bit unsigned int\n          var u16bytesRr = bytes.buffer.slice(offset, offset + 2);\n          var u16Rr = new Uint16Array(u16bytesRr)[0];\n          //Increase offset\n          offset += 2;\n      }\n  }\n}\n```\n\n\n## More information ##\n* Author: Rand Dusing\n* Website: http://www.randdusing.com/\n* Email: <randdusing@gmail.com>\n* Facebook: https://www.facebook.com/randdusing\n* LinkedIn: https://www.linkedin.com/in/randdusing\n* Twitter: https://twitter.com/randdusing\n\n## License ##\nThe MIT License (MIT)\n\nCopyright (c) 2016 Rand Dusing and contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "readmeFilename": "readme.md",
  "_id": "cordova-plugin-bluetoothle@3.0.1",
  "_from": "cordova-plugin-bluetoothle@latest"
}
